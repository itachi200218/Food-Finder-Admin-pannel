package com.example.demo1.service.impl;

import com.example.demo1.service.GeminiService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;

@Service
public class GeminiServiceImpl implements GeminiService {

    @Value("${gemini.api.key}")
    private String geminiApiKey;

    @Autowired private UserAnalyticsService userAnalyticsService;
    @Autowired private AppUserService appUserService;
    @Autowired private RecipeService recipeService;
    @Autowired private CategoryService categoryService;
    @Autowired private GeminiApiService geminiApiService;
    @Autowired private QueryParserService queryParserService;

    @Override
    public String generateExplanation(String query) {
        String dbResult = handleAdminQuery(query);

        // Only use Gemini if it‚Äôs not a DB answer
        if (dbResult.startsWith("I'm not sure")) {
            return geminiApiService.callGemini("Answer conversationally as Admin AI: " + query, geminiApiKey);
        }

        // ‚úÖ Directly return DB result if it came from database
        if (dbResult.startsWith("üë•") || dbResult.contains("All Users") || dbResult.contains("Total users")) {
            return dbResult;
        }

        // Else, explain it normally
        return geminiApiService.callGemini("Explain clearly as Admin AI: " + dbResult, geminiApiKey);
    }


    @Override
    public String handleAdminQuery(String query) {
        query = query.toLowerCase();

        // üîç Step 1: Detect the intent
        String queryType = queryParserService.parseQueryType(query);

        // üîπ Step 2: Route based on detected query
        switch (queryType) {

            // üßë‚Äçüíª USER ANALYTICS
            case "USER_LIST":
            case "USER_COUNT":
            case "MOST_ACTIVE_USER":
            case "TOP_USERS":
                return appUserService.handleUserQueries(query);

            // üç≥ RECIPE ANALYTICS
            case "DUPLICATE_RECIPES":
            case "RECIPE_COUNT_BY_CATEGORY":
            case "MISSING_DESCRIPTION":
            case "AI_SUMMARIZE_CATEGORIES":
            case "TOP_CATEGORIES":
            case "LARGE_RECIPES":
            case "LEAST_CATEGORY":
            case "AI_TRENDING_DISHES":
            case "AI_SUGGEST_CATEGORIES":
            case "SEARCH_BY_INGREDIENT":
            case "ADD_RECIPE":
            case "DELETE_RECIPE":
            case "UPDATE_RECIPE":
            case "RECIPE_SEARCH":
            case "RECENT_RECIPES":
                return recipeService.handleRecipeQueries(query);

            // üóÇÔ∏è CATEGORY MANAGEMENT
            case "CATEGORY_LIST":
            case "ADD_CATEGORY":
            case "DELETE_CATEGORY":
            case "UPDATE_CATEGORY":
            case "HELP_ADD_CATEGORY":
            case "HELP_DUPLICATE_RECIPES":
            case "HELP_SEO":
                return categoryService.handleCategoryQueries(query);

            // üß† DATABASE INSIGHTS
            case "DATABASE_STRUCTURE":
            case "SHOW_RELATIONSHIPS":
            case "LIST_TABLES":
                return getDatabaseStructure();

            // üìà ADVANCED USER ANALYTICS
            case "USER_STATS":
            case "USER_ENGAGEMENT":
                return userAnalyticsService.generateUserReport();

            // üí¨ DEFAULT CASE: Let Gemini handle it
            default:
                return "I'm not sure how to handle this query directly in DB context.";
        }
    }

    // üßæ Step 3: Database Structure Details
    private String getDatabaseStructure() {
        return """
        üìò DATABASE STRUCTURE OVERVIEW

        üßë‚Äçüíª Table: AppUser
        ‚Ä¢ id (Long)
        ‚Ä¢ username (String)
        ‚Ä¢ email (String)
        ‚Ä¢ password (String)
        ‚Ä¢ createdAt (Timestamp)

        üçΩÔ∏è Table: Recipe
        ‚Ä¢ id (Long)
        ‚Ä¢ name (String)
        ‚Ä¢ ingredients (Text)
        ‚Ä¢ description (Text)
        ‚Ä¢ steps (Text)
        ‚Ä¢ url (String)
        ‚Ä¢ categoryId (Foreign Key ‚Üí Category.id)
        ‚Ä¢ createdAt (Timestamp)

        üóÇÔ∏è Table: Category
        ‚Ä¢ id (Long)
        ‚Ä¢ name (String)
        ‚Ä¢ description (String)
        ‚Ä¢ createdAt (Timestamp)

        ‚öôÔ∏è Relationships:
        ‚Ä¢ One Category ‚Üí Many Recipes
        ‚Ä¢ One User ‚Üí Can Add Many Recipes
        """;
    }
}
